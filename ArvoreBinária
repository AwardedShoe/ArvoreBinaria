"""Sua  tarefa  será  construir  uma  árvore  binária,  lembrando  que  árvore  binária  são  aquelas  que 
possuem  no  máximo  dois  filhos  em  cada  vértice.  Esta  árvore  será  gerada  de  forma  aleatória  e  deve 
possuir  um  número  de  vértices  aleatoriamente  selecionado  entre  10  e  26  vértices.  Para  criar  esta 
árvore você irá criar um array capaz de armazenar uma quantidade de itens equivalente ao número de 
vértices da árvore que será gerada e preencher estes vértices com valores aleatórios entre 1 e 1000. 
Este array será usado para montar a árvore a árvore binária.  """

"""NOME: EDUARDO DE FARIA FREITAS"""

import random

class No:
     
     def __init__(self, key, dir, esq):
          self.item = key
          self.dir = dir
          self.esq = esq
          
class Arvore:

     def __init__(self):
          self.root = No(None,None,None)
          self.root = None

     def inserir(self, v):
          novo = No(v,None,None)
          if self.root == None:
               self.root = novo
          else: 
               atual = self.root
               while True:
                    anterior = atual
                    if v <= atual.item: 
                         atual = atual.esq
                         if atual == None:
                                anterior.esq = novo
                                return
        
                    else:
                         atual = atual.dir
                         if atual == None:
                                 anterior.dir = novo
                                 return
                    

     def buscar(self, chave):
         if self.root == None:
              return None
         atual = self.root 
         while atual.item != chave: 
               if chave < atual.item:
                    atual = atual.esq 
               else:
                    atual = atual.dir 
               if atual == None:
                    return None 
         return atual    

  
     def nosucessor(self, apaga): 
          paidosucessor = apaga
          sucessor = apaga
          atual = apaga.dir

          while atual != None: 
               paidosucessor = sucessor
               sucessor = atual
               atual = atual.esq 

          if sucessor != apaga.dir: 
               paidosucessor.esq = sucessor.dir 
                                      
          return sucessor

     def remover(self, v):
         if self.root == None:
               return False 
         atual = self.root
         pai = self.root
         filho_esq = True
        
         while atual.item != v:
               pai = atual
               if v < atual.item:
                    atual = atual.esq
                    filho_esq = True 
               else:
                    atual = atual.dir 
                    filho_esq = False 
               if atual == None:
                    return False 
        

         if atual.esq == None and atual.dir == None:
               if atual == self.root:
                    self.root = None
               else:
                    if filho_esq:
                         pai.esq =  None 
                    else:
                         pai.dir = None

         elif atual.dir == None:
               if atual == self.root:
                    self.root = atual.esq 
               else:
                    if filho_esq:
                         pai.esq = atual.esq 
                    else:
                         pai.dir = atual.esq 
         
         elif atual.esq == None:
               if atual == self.root:
                    self.root = atual.dir 
               else:
                    if filho_esq:
                         pai.esq = atual.dir 
                    else:
                         pai.dir = atual.dir 

   
         else:
               sucessor = self.nosucessor(atual)
          
               if atual == self.root:
                    self.root = sucessor
               else:
                    if filho_esq:
                         pai.esq = sucessor
                    else:
                         pai.dir = sucessor
               sucessor.esq = atual.esq
         return True
  
     def inOrder(self, atual):
         if atual != None:
              self.inOrder(atual.esq)
              print(atual.item,end=" ")
              self.inOrder(atual.dir)
  
     def preOrder(self, atual):
         if atual != None:
              print(atual.item,end=" ")
              self.preOrder(atual.esq)
              self.preOrder(atual.dir)
       
     def posOrder(self, atual):
         if atual != None:
              self.posOrder(atual.esq)
              self.posOrder(atual.dir)
              print(atual.item,end=" ")

  

     def caminhar(self):
          print("Ordem: ",end="")
          self.inOrder(self.root)
          print("\nPos-ordem: ",end="")
          self.posOrder(self.root)
          print("\nPre-ordem: ",end="")
          self.preOrder(self.root)

     def printTree(self):
         print("Árvore em ASCII: ", self.inserir)
         
     def verifica(self):
         y = random.randrange(300, 575)
         print(y)
         for i in [arv]:
             print(i, "Valor presente")
     






arv = Arvore()

opcao = 0
while opcao != 5:
     print("\n-----------------------------------")
     print("Interface de exibiçao:")
     print("1: Inserir valor aleatorio ")
     print("2: Excluir elemento")
     print("3: Pesquisar elemento")
     print("4: Exibicao das ordens de leitura")
     print("5: Verificaçao de valores entre 300 e 575: ")
     print("6: Sair")
     print("-----------------------------------")
     opcao = int(input("Escolha uma opcao: "))
     if opcao == 1:
          x = random.randrange(1, 1000)
          arv.inserir(x)
     elif opcao == 2:
          x = int(input("Informe o valor: "))
          if arv.remover(x) == False:
               print("Valor nao encontrado")
     elif opcao == 3:
          x = int(input("Informe o valor: "))
          if arv.buscar(x) != None:
               print("Valor Encontrado")
          else:
               print("Valor nao encontrado")	 
     elif opcao == 4:
          arv.caminhar()
     elif opcao == 5:
          arv.verifica()
     elif opcao == 6:
         break
